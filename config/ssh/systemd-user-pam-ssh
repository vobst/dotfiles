#!/bin/sh
# From: https://github.com/capocasa/systemd-user-pam-ssh
# Executed by pam after login
# For use with pam_exec.so
#
#   auth  optional  pam_exec.so  expose_authtok  /usr/lib/systemd/pam/systemd-user-pam-ssh
#
# Takes a password from STDIN, expects that the ssh-agent runs as a systemd user service,
# decrypts the ssh key using the provided password, adding it to the agent.

# Handle inital checks as root
if [ $(id -u) = 0 ]
then
	# Don't execute if the systemd --user instance isn't running
	systemctl -q is-active user@$(id -u ${PAM_USER}) || exit 0

	# Re-execute this script as the user to add their key (while piping STDIN)
	cat | exec su ${PAM_USER} -c "$0 initialize"

# Handle adding the key as the user
else

	if [ "$1" = "initialize" ]; then
		# We need to specify the XDG_RUNTIME_DIR because pam_systemd won't have run
		export XDG_RUNTIME_DIR=/run/user/$(id -u)

		# Get the SSH_AUTH_SOCK variable from the user session
		export $(systemctl --user show-environment | grep ^SSH_AUTH_SOCK=)

		# Use self as askpass to work around ssh-add not reading stdin
		# on some systems
		export SSH_ASKPASS="$0"

		#Fake display to coax to actually use SSH_ASKPASS
		export DISPLAY=nodisplay

		# will invoke the script a third time, by default ~/.ssh/id_rsa is added
		ssh-add
		exit 0

	# Double as SSH_ASKPASS 
	else
		# Decrypt passhrase if file exists
		FILE="$HOME/.ssh/passphrase"
		if [ -e "$FILE" ]; then
			# to use a different passphrase, prepare file with
			# read -s PASSWORD
			# openssl enc -pbkdf2 -in - -out ~/.ssh/passphrase -e -aes256 -k
			read PASSWORD
			openssl enc -pbkdf2 -in "$FILE" -out - -d -aes256 -k "$PASSWORD"
			if [ $? -ne 0 ]; then
				exit 1
			fi

		# Use password as passphrase
		else
			cat
		fi
		exit 0
	fi
fi
